// Code generated; DO NOT EDIT.

#[derive(Clone, Debug, PartialEq, FromPrimitive)]
pub enum Typescript {
    End = 0,
    Identifier = 1,
    HashBangLine = 2,
    Export = 3,
    STAR = 4,
    Default = 5,
    EQ = 6,
    As = 7,
    Namespace = 8,
    LBRACE = 9,
    COMMA = 10,
    RBRACE = 11,
    Type2 = 12,
    Typeof = 13,
    Import2 = 14,
    From = 15,
    Var = 16,
    Let = 17,
    Const = 18,
    BANG = 19,
    Else = 20,
    If = 21,
    Switch = 22,
    For = 23,
    LPAREN = 24,
    RPAREN = 25,
    Await = 26,
    In = 27,
    Of = 28,
    While = 29,
    Do = 30,
    Try = 31,
    With = 32,
    Break = 33,
    Continue = 34,
    Debugger = 35,
    Return = 36,
    Throw = 37,
    SEMI = 38,
    COLON = 39,
    Case = 40,
    Catch = 41,
    Finally = 42,
    Yield = 43,
    LBRACK = 44,
    RBRACK = 45,
    LT = 46,
    GT = 47,
    SLASH = 48,
    DOT = 49,
    Class2 = 50,
    Async = 51,
    Function2 = 52,
    EQGT = 53,
    QMARKDOT = 54,
    New = 55,
    PLUSEQ = 56,
    DASHEQ = 57,
    STAREQ = 58,
    SLASHEQ = 59,
    PERCENTEQ = 60,
    CARETEQ = 61,
    AMPEQ = 62,
    PIPEEQ = 63,
    GTGTEQ = 64,
    GTGTGTEQ = 65,
    LTLTEQ = 66,
    STARSTAREQ = 67,
    AMPAMPEQ = 68,
    PIPEPIPEEQ = 69,
    QMARKQMARKEQ = 70,
    DOTDOTDOT = 71,
    QMARK = 72,
    AMPAMP = 73,
    PIPEPIPE = 74,
    GTGT = 75,
    GTGTGT = 76,
    LTLT = 77,
    AMP = 78,
    CARET = 79,
    PIPE = 80,
    PLUS = 81,
    DASH = 82,
    PERCENT = 83,
    STARSTAR = 84,
    LTEQ = 85,
    EQEQ = 86,
    EQEQEQ = 87,
    BANGEQ = 88,
    BANGEQEQ = 89,
    GTEQ = 90,
    QMARKQMARK = 91,
    Instanceof = 92,
    TILDE = 93,
    Void = 94,
    Delete = 95,
    PLUSPLUS = 96,
    DASHDASH = 97,
    DQUOTE = 98,
    StringToken1 = 99,
    SQUOTE = 100,
    StringToken2 = 101,
    EscapeSequence = 102,
    Comment = 103,
    BQUOTE = 104,
    DOLLARLBRACE = 105,
    SLASH2 = 106,
    RegexPattern = 107,
    RegexFlags = 108,
    Number = 109,
    Target = 110,
    This = 111,
    Super = 112,
    True = 113,
    False = 114,
    Null = 115,
    Undefined = 116,
    AT = 117,
    Static = 118,
    Abstract = 119,
    Get = 120,
    Set = 121,
    Declare = 122,
    Public = 123,
    Private = 124,
    Protected = 125,
    Module3 = 126,
    Any = 127,
    Number2 = 128,
    Boolean = 129,
    String2 = 130,
    Symbol = 131,
    Require = 132,
    Implements = 133,
    Global = 134,
    Interface = 135,
    Extends = 136,
    Enum = 137,
    Readonly = 138,
    DASHQMARKCOLON = 139,
    QMARKCOLON = 140,
    Asserts2 = 141,
    Is = 142,
    Keyof = 143,
    LBRACEPIPE = 144,
    PIPERBRACE = 145,
    AutomaticSemicolon = 146,
    TemplateChars = 147,
    Program = 148,
    ExportStatement = 149,
    ExportClause = 150,
    ExportSpecifier = 151,
    Declaration = 152,
    Import = 153,
    ImportStatement = 154,
    ImportClause = 155,
    FromClause = 156,
    NamespaceImport = 157,
    NamedImports = 158,
    ExpressionStatement = 159,
    VariableDeclaration = 160,
    LexicalDeclaration = 161,
    VariableDeclarator = 162,
    StatementBlock = 163,
    ElseClause = 164,
    IfStatement = 165,
    SwitchStatement = 166,
    ForStatement = 167,
    ForInStatement = 168,
    ForHeader = 169,
    WhileStatement = 170,
    DoStatement = 171,
    TryStatement = 172,
    WithStatement = 173,
    BreakStatement = 174,
    ContinueStatement = 175,
    DebuggerStatement = 176,
    ReturnStatement = 177,
    ThrowStatement = 178,
    EmptyStatement = 179,
    LabeledStatement = 180,
    SwitchBody = 181,
    SwitchCase = 182,
    SwitchDefault = 183,
    CatchClause = 184,
    FinallyClause = 185,
    ParenthesizedExpression = 186,
    Expression = 187,
    YieldExpression = 188,
    Object = 189,
    AssignmentPattern = 190,
    Array = 191,
    NestedIdentifier = 192,
    Class = 193,
    ClassDeclaration = 194,
    ClassHeritage = 195,
    Function = 196,
    FunctionDeclaration = 197,
    GeneratorFunction = 198,
    GeneratorFunctionDeclaration = 199,
    ArrowFunction = 200,
    CallSignature = 201,
    CallExpression = 202,
    NewExpression = 203,
    AwaitExpression = 204,
    MemberExpression = 205,
    SubscriptExpression = 206,
    AssignmentExpression = 207,
    AugmentedAssignmentLhs = 208,
    AugmentedAssignmentExpression = 209,
    Initializer = 210,
    SpreadElement = 211,
    TernaryExpression = 212,
    BinaryExpression = 213,
    UnaryExpression = 214,
    UpdateExpression = 215,
    SequenceExpression = 216,
    String = 217,
    TemplateString = 218,
    TemplateSubstitution = 219,
    Regex = 220,
    MetaProperty = 221,
    Arguments = 222,
    Decorator = 223,
    MemberExpression2 = 224,
    CallExpression2 = 225,
    ClassBody = 226,
    PublicFieldDefinition = 227,
    FormalParameters = 228,
    RestParameter = 229,
    MethodDefinition = 230,
    Pair = 231,
    PropertyName = 232,
    ComputedPropertyName = 233,
    NonNullExpression = 234,
    MethodSignature = 235,
    AbstractMethodSignature = 236,
    FunctionSignature = 237,
    TypeAssertion = 238,
    AsExpression = 239,
    ImportRequireClause = 240,
    ImplementsClause = 241,
    AmbientDeclaration = 242,
    AbstractClassDeclaration = 243,
    Module = 244,
    InternalModule = 245,
    Module2 = 246,
    ImportAlias = 247,
    NestedTypeIdentifier = 248,
    InterfaceDeclaration = 249,
    ExtendsClause = 250,
    EnumDeclaration = 251,
    EnumBody = 252,
    EnumAssignment = 253,
    TypeAliasDeclaration = 254,
    AccessibilityModifier = 255,
    RequiredParameter = 256,
    OptionalParameter = 257,
    ParameterName = 258,
    RestIdentifier = 259,
    RestIdentifier2 = 260,
    OmittingTypeAnnotation = 261,
    OptingTypeAnnotation = 262,
    TypeAnnotation = 263,
    Asserts = 264,
    Type = 265,
    OptionalIdentifier = 266,
    TupleTypeIdentifier = 267,
    LabeledTupleTypeMember = 268,
    TupleTypeMember = 269,
    ConstructorType = 270,
    PrimaryType = 271,
    ConditionalType = 272,
    GenericType = 273,
    TypePredicate = 274,
    TypePredicateAnnotation = 275,
    TypeQuery = 276,
    IndexTypeQuery = 277,
    LookupType = 278,
    MappedTypeClause = 279,
    LiteralType = 280,
    UnaryExpression2 = 281,
    ExistentialType = 282,
    FlowMaybeType = 283,
    ParenthesizedType = 284,
    PredefinedType = 285,
    TypeArguments = 286,
    ObjectType = 287,
    CallSignature2 = 288,
    PropertySignature = 289,
    TypeParameters = 290,
    TypeParameter = 291,
    DefaultType = 292,
    Constraint = 293,
    ConstructSignature = 294,
    IndexSignature = 295,
    ArrayType = 296,
    TupleTypeBody = 297,
    TupleType = 298,
    UnionType = 299,
    IntersectionType = 300,
    FunctionType = 301,
    ProgramRepeat1 = 302,
    ExportStatementRepeat1 = 303,
    ExportClauseRepeat1 = 304,
    NamedImportsRepeat1 = 305,
    VariableDeclarationRepeat1 = 306,
    SwitchBodyRepeat1 = 307,
    ObjectRepeat1 = 308,
    ArrayRepeat1 = 309,
    StringRepeat1 = 310,
    StringRepeat2 = 311,
    TemplateStringRepeat1 = 312,
    ClassBodyRepeat1 = 313,
    FormalParametersRepeat1 = 314,
    ImplementsClauseRepeat1 = 315,
    ExtendsClauseRepeat1 = 316,
    EnumBodyRepeat1 = 317,
    ObjectTypeRepeat1 = 318,
    TypeParametersRepeat1 = 319,
    TupleTypeBodyRepeat1 = 320,
    ArrayPattern = 321,
    ImportSpecifier = 322,
    ObjectPattern = 323,
    PropertyIdentifier = 324,
    ShorthandPropertyIdentifier = 325,
    StatementIdentifier = 326,
    TypeIdentifier = 327,
    Error = 328,
}

impl Into<&'static str> for Typescript {
    fn into(self) -> &'static str {
        match self {
            Typescript::End => "end",
            Typescript::Identifier => "identifier",
            Typescript::HashBangLine => "hash_bang_line",
            Typescript::Export => "export",
            Typescript::STAR => "*",
            Typescript::Default => "default",
            Typescript::EQ => "=",
            Typescript::As => "as",
            Typescript::Namespace => "namespace",
            Typescript::LBRACE => "{",
            Typescript::COMMA => ",",
            Typescript::RBRACE => "}",
            Typescript::Type2 => "type",
            Typescript::Typeof => "typeof",
            Typescript::Import2 => "import",
            Typescript::From => "from",
            Typescript::Var => "var",
            Typescript::Let => "let",
            Typescript::Const => "const",
            Typescript::BANG => "!",
            Typescript::Else => "else",
            Typescript::If => "if",
            Typescript::Switch => "switch",
            Typescript::For => "for",
            Typescript::LPAREN => "(",
            Typescript::RPAREN => ")",
            Typescript::Await => "await",
            Typescript::In => "in",
            Typescript::Of => "of",
            Typescript::While => "while",
            Typescript::Do => "do",
            Typescript::Try => "try",
            Typescript::With => "with",
            Typescript::Break => "break",
            Typescript::Continue => "continue",
            Typescript::Debugger => "debugger",
            Typescript::Return => "return",
            Typescript::Throw => "throw",
            Typescript::SEMI => ";",
            Typescript::COLON => ":",
            Typescript::Case => "case",
            Typescript::Catch => "catch",
            Typescript::Finally => "finally",
            Typescript::Yield => "yield",
            Typescript::LBRACK => "[",
            Typescript::RBRACK => "]",
            Typescript::LT => "<",
            Typescript::GT => ">",
            Typescript::SLASH => "/",
            Typescript::DOT => ".",
            Typescript::Class2 => "class",
            Typescript::Async => "async",
            Typescript::Function2 => "function",
            Typescript::EQGT => "=>",
            Typescript::QMARKDOT => "?.",
            Typescript::New => "new",
            Typescript::PLUSEQ => "+=",
            Typescript::DASHEQ => "-=",
            Typescript::STAREQ => "*=",
            Typescript::SLASHEQ => "/=",
            Typescript::PERCENTEQ => "%=",
            Typescript::CARETEQ => "^=",
            Typescript::AMPEQ => "&=",
            Typescript::PIPEEQ => "|=",
            Typescript::GTGTEQ => ">>=",
            Typescript::GTGTGTEQ => ">>>=",
            Typescript::LTLTEQ => "<<=",
            Typescript::STARSTAREQ => "**=",
            Typescript::AMPAMPEQ => "&&=",
            Typescript::PIPEPIPEEQ => "||=",
            Typescript::QMARKQMARKEQ => "??=",
            Typescript::DOTDOTDOT => "...",
            Typescript::QMARK => "?",
            Typescript::AMPAMP => "&&",
            Typescript::PIPEPIPE => "||",
            Typescript::GTGT => ">>",
            Typescript::GTGTGT => ">>>",
            Typescript::LTLT => "<<",
            Typescript::AMP => "&",
            Typescript::CARET => "^",
            Typescript::PIPE => "|",
            Typescript::PLUS => "+",
            Typescript::DASH => "-",
            Typescript::PERCENT => "%",
            Typescript::STARSTAR => "**",
            Typescript::LTEQ => "<=",
            Typescript::EQEQ => "==",
            Typescript::EQEQEQ => "===",
            Typescript::BANGEQ => "!=",
            Typescript::BANGEQEQ => "!==",
            Typescript::GTEQ => ">=",
            Typescript::QMARKQMARK => "??",
            Typescript::Instanceof => "instanceof",
            Typescript::TILDE => "~",
            Typescript::Void => "void",
            Typescript::Delete => "delete",
            Typescript::PLUSPLUS => "++",
            Typescript::DASHDASH => "--",
            Typescript::DQUOTE => "\"",
            Typescript::StringToken1 => "string_token1",
            Typescript::SQUOTE => "'",
            Typescript::StringToken2 => "string_token2",
            Typescript::EscapeSequence => "escape_sequence",
            Typescript::Comment => "comment",
            Typescript::BQUOTE => "`",
            Typescript::DOLLARLBRACE => "${",
            Typescript::SLASH2 => "/",
            Typescript::RegexPattern => "regex_pattern",
            Typescript::RegexFlags => "regex_flags",
            Typescript::Number => "number",
            Typescript::Target => "target",
            Typescript::This => "this",
            Typescript::Super => "super",
            Typescript::True => "true",
            Typescript::False => "false",
            Typescript::Null => "null",
            Typescript::Undefined => "undefined",
            Typescript::AT => "@",
            Typescript::Static => "static",
            Typescript::Abstract => "abstract",
            Typescript::Get => "get",
            Typescript::Set => "set",
            Typescript::Declare => "declare",
            Typescript::Public => "public",
            Typescript::Private => "private",
            Typescript::Protected => "protected",
            Typescript::Module3 => "module",
            Typescript::Any => "any",
            Typescript::Number2 => "number",
            Typescript::Boolean => "boolean",
            Typescript::String2 => "string",
            Typescript::Symbol => "symbol",
            Typescript::Require => "require",
            Typescript::Implements => "implements",
            Typescript::Global => "global",
            Typescript::Interface => "interface",
            Typescript::Extends => "extends",
            Typescript::Enum => "enum",
            Typescript::Readonly => "readonly",
            Typescript::DASHQMARKCOLON => "-?:",
            Typescript::QMARKCOLON => "?:",
            Typescript::Asserts2 => "asserts",
            Typescript::Is => "is",
            Typescript::Keyof => "keyof",
            Typescript::LBRACEPIPE => "{|",
            Typescript::PIPERBRACE => "|}",
            Typescript::AutomaticSemicolon => "_automatic_semicolon",
            Typescript::TemplateChars => "_template_chars",
            Typescript::Program => "program",
            Typescript::ExportStatement => "export_statement",
            Typescript::ExportClause => "export_clause",
            Typescript::ExportSpecifier => "export_specifier",
            Typescript::Declaration => "_declaration",
            Typescript::Import => "import",
            Typescript::ImportStatement => "import_statement",
            Typescript::ImportClause => "import_clause",
            Typescript::FromClause => "_from_clause",
            Typescript::NamespaceImport => "namespace_import",
            Typescript::NamedImports => "named_imports",
            Typescript::ExpressionStatement => "expression_statement",
            Typescript::VariableDeclaration => "variable_declaration",
            Typescript::LexicalDeclaration => "lexical_declaration",
            Typescript::VariableDeclarator => "variable_declarator",
            Typescript::StatementBlock => "statement_block",
            Typescript::ElseClause => "else_clause",
            Typescript::IfStatement => "if_statement",
            Typescript::SwitchStatement => "switch_statement",
            Typescript::ForStatement => "for_statement",
            Typescript::ForInStatement => "for_in_statement",
            Typescript::ForHeader => "_for_header",
            Typescript::WhileStatement => "while_statement",
            Typescript::DoStatement => "do_statement",
            Typescript::TryStatement => "try_statement",
            Typescript::WithStatement => "with_statement",
            Typescript::BreakStatement => "break_statement",
            Typescript::ContinueStatement => "continue_statement",
            Typescript::DebuggerStatement => "debugger_statement",
            Typescript::ReturnStatement => "return_statement",
            Typescript::ThrowStatement => "throw_statement",
            Typescript::EmptyStatement => "empty_statement",
            Typescript::LabeledStatement => "labeled_statement",
            Typescript::SwitchBody => "switch_body",
            Typescript::SwitchCase => "switch_case",
            Typescript::SwitchDefault => "switch_default",
            Typescript::CatchClause => "catch_clause",
            Typescript::FinallyClause => "finally_clause",
            Typescript::ParenthesizedExpression => "parenthesized_expression",
            Typescript::Expression => "_expression",
            Typescript::YieldExpression => "yield_expression",
            Typescript::Object => "object",
            Typescript::AssignmentPattern => "assignment_pattern",
            Typescript::Array => "array",
            Typescript::NestedIdentifier => "nested_identifier",
            Typescript::Class => "class",
            Typescript::ClassDeclaration => "class_declaration",
            Typescript::ClassHeritage => "class_heritage",
            Typescript::Function => "function",
            Typescript::FunctionDeclaration => "function_declaration",
            Typescript::GeneratorFunction => "generator_function",
            Typescript::GeneratorFunctionDeclaration => "generator_function_declaration",
            Typescript::ArrowFunction => "arrow_function",
            Typescript::CallSignature => "_call_signature",
            Typescript::CallExpression => "call_expression",
            Typescript::NewExpression => "new_expression",
            Typescript::AwaitExpression => "await_expression",
            Typescript::MemberExpression => "member_expression",
            Typescript::SubscriptExpression => "subscript_expression",
            Typescript::AssignmentExpression => "assignment_expression",
            Typescript::AugmentedAssignmentLhs => "_augmented_assignment_lhs",
            Typescript::AugmentedAssignmentExpression => "augmented_assignment_expression",
            Typescript::Initializer => "_initializer",
            Typescript::SpreadElement => "spread_element",
            Typescript::TernaryExpression => "ternary_expression",
            Typescript::BinaryExpression => "binary_expression",
            Typescript::UnaryExpression => "unary_expression",
            Typescript::UpdateExpression => "update_expression",
            Typescript::SequenceExpression => "sequence_expression",
            Typescript::String => "string",
            Typescript::TemplateString => "template_string",
            Typescript::TemplateSubstitution => "template_substitution",
            Typescript::Regex => "regex",
            Typescript::MetaProperty => "meta_property",
            Typescript::Arguments => "arguments",
            Typescript::Decorator => "decorator",
            Typescript::MemberExpression2 => "member_expression",
            Typescript::CallExpression2 => "call_expression",
            Typescript::ClassBody => "class_body",
            Typescript::PublicFieldDefinition => "public_field_definition",
            Typescript::FormalParameters => "formal_parameters",
            Typescript::RestParameter => "rest_parameter",
            Typescript::MethodDefinition => "method_definition",
            Typescript::Pair => "pair",
            Typescript::PropertyName => "_property_name",
            Typescript::ComputedPropertyName => "computed_property_name",
            Typescript::NonNullExpression => "non_null_expression",
            Typescript::MethodSignature => "method_signature",
            Typescript::AbstractMethodSignature => "abstract_method_signature",
            Typescript::FunctionSignature => "function_signature",
            Typescript::TypeAssertion => "type_assertion",
            Typescript::AsExpression => "as_expression",
            Typescript::ImportRequireClause => "import_require_clause",
            Typescript::ImplementsClause => "implements_clause",
            Typescript::AmbientDeclaration => "ambient_declaration",
            Typescript::AbstractClassDeclaration => "abstract_class_declaration",
            Typescript::Module => "module",
            Typescript::InternalModule => "internal_module",
            Typescript::Module2 => "_module",
            Typescript::ImportAlias => "import_alias",
            Typescript::NestedTypeIdentifier => "nested_type_identifier",
            Typescript::InterfaceDeclaration => "interface_declaration",
            Typescript::ExtendsClause => "extends_clause",
            Typescript::EnumDeclaration => "enum_declaration",
            Typescript::EnumBody => "enum_body",
            Typescript::EnumAssignment => "enum_assignment",
            Typescript::TypeAliasDeclaration => "type_alias_declaration",
            Typescript::AccessibilityModifier => "accessibility_modifier",
            Typescript::RequiredParameter => "required_parameter",
            Typescript::OptionalParameter => "optional_parameter",
            Typescript::ParameterName => "_parameter_name",
            Typescript::RestIdentifier => "_rest_identifier",
            Typescript::RestIdentifier2 => "rest_identifier",
            Typescript::OmittingTypeAnnotation => "omitting_type_annotation",
            Typescript::OptingTypeAnnotation => "opting_type_annotation",
            Typescript::TypeAnnotation => "type_annotation",
            Typescript::Asserts => "asserts",
            Typescript::Type => "_type",
            Typescript::OptionalIdentifier => "optional_identifier",
            Typescript::TupleTypeIdentifier => "_tuple_type_identifier",
            Typescript::LabeledTupleTypeMember => "labeled_tuple_type_member",
            Typescript::TupleTypeMember => "_tuple_type_member",
            Typescript::ConstructorType => "constructor_type",
            Typescript::PrimaryType => "_primary_type",
            Typescript::ConditionalType => "conditional_type",
            Typescript::GenericType => "generic_type",
            Typescript::TypePredicate => "type_predicate",
            Typescript::TypePredicateAnnotation => "type_predicate_annotation",
            Typescript::TypeQuery => "type_query",
            Typescript::IndexTypeQuery => "index_type_query",
            Typescript::LookupType => "lookup_type",
            Typescript::MappedTypeClause => "mapped_type_clause",
            Typescript::LiteralType => "literal_type",
            Typescript::UnaryExpression2 => "unary_expression",
            Typescript::ExistentialType => "existential_type",
            Typescript::FlowMaybeType => "flow_maybe_type",
            Typescript::ParenthesizedType => "parenthesized_type",
            Typescript::PredefinedType => "predefined_type",
            Typescript::TypeArguments => "type_arguments",
            Typescript::ObjectType => "object_type",
            Typescript::CallSignature2 => "call_signature",
            Typescript::PropertySignature => "property_signature",
            Typescript::TypeParameters => "type_parameters",
            Typescript::TypeParameter => "type_parameter",
            Typescript::DefaultType => "default_type",
            Typescript::Constraint => "constraint",
            Typescript::ConstructSignature => "construct_signature",
            Typescript::IndexSignature => "index_signature",
            Typescript::ArrayType => "array_type",
            Typescript::TupleTypeBody => "_tuple_type_body",
            Typescript::TupleType => "tuple_type",
            Typescript::UnionType => "union_type",
            Typescript::IntersectionType => "intersection_type",
            Typescript::FunctionType => "function_type",
            Typescript::ProgramRepeat1 => "program_repeat1",
            Typescript::ExportStatementRepeat1 => "export_statement_repeat1",
            Typescript::ExportClauseRepeat1 => "export_clause_repeat1",
            Typescript::NamedImportsRepeat1 => "named_imports_repeat1",
            Typescript::VariableDeclarationRepeat1 => "variable_declaration_repeat1",
            Typescript::SwitchBodyRepeat1 => "switch_body_repeat1",
            Typescript::ObjectRepeat1 => "object_repeat1",
            Typescript::ArrayRepeat1 => "array_repeat1",
            Typescript::StringRepeat1 => "string_repeat1",
            Typescript::StringRepeat2 => "string_repeat2",
            Typescript::TemplateStringRepeat1 => "template_string_repeat1",
            Typescript::ClassBodyRepeat1 => "class_body_repeat1",
            Typescript::FormalParametersRepeat1 => "formal_parameters_repeat1",
            Typescript::ImplementsClauseRepeat1 => "implements_clause_repeat1",
            Typescript::ExtendsClauseRepeat1 => "extends_clause_repeat1",
            Typescript::EnumBodyRepeat1 => "enum_body_repeat1",
            Typescript::ObjectTypeRepeat1 => "object_type_repeat1",
            Typescript::TypeParametersRepeat1 => "type_parameters_repeat1",
            Typescript::TupleTypeBodyRepeat1 => "_tuple_type_body_repeat1",
            Typescript::ArrayPattern => "array_pattern",
            Typescript::ImportSpecifier => "import_specifier",
            Typescript::ObjectPattern => "object_pattern",
            Typescript::PropertyIdentifier => "property_identifier",
            Typescript::ShorthandPropertyIdentifier => "shorthand_property_identifier",
            Typescript::StatementIdentifier => "statement_identifier",
            Typescript::TypeIdentifier => "type_identifier",
            Typescript::Error => "ERROR",
        }
    }
}

#[allow(clippy::unreadable_literal)]
static KEYS: phf::Map<&'static str, Typescript> = ::phf::Map {
    key: 3213172566270843353,
    disps: ::phf::Slice::Static(&[
        (0, 63),
        (0, 145),
        (0, 21),
        (0, 178),
        (0, 216),
        (0, 91),
        (0, 47),
        (0, 3),
        (0, 110),
        (0, 233),
        (0, 0),
        (0, 2),
        (0, 155),
        (1, 235),
        (0, 31),
        (0, 63),
        (0, 214),
        (1, 0),
        (1, 20),
        (1, 101),
        (0, 1),
        (0, 0),
        (0, 56),
        (1, 207),
        (2, 282),
        (11, 116),
        (2, 44),
        (0, 94),
        (1, 8),
        (9, 265),
        (0, 301),
        (0, 4),
        (0, 138),
        (37, 215),
        (0, 4),
        (0, 0),
        (0, 0),
        (2, 83),
        (0, 3),
        (0, 12),
        (0, 57),
        (0, 8),
        (1, 144),
        (0, 3),
        (6, 208),
        (5, 96),
        (1, 200),
        (0, 63),
        (1, 203),
        (4, 214),
        (1, 15),
        (5, 35),
        (0, 36),
        (0, 2),
        (0, 16),
        (0, 82),
        (0, 46),
        (13, 289),
        (19, 122),
        (45, 231),
        (0, 28),
        (0, 58),
        (2, 232),
    ]),
    entries: ::phf::Slice::Static(&[
        (">", Typescript::GT),
        ("if_statement", Typescript::IfStatement),
        ("&", Typescript::AMP),
        ("switch_case", Typescript::SwitchCase),
        ("import_clause", Typescript::ImportClause),
        ("async", Typescript::Async),
        ("!", Typescript::BANG),
        ("<", Typescript::LT),
        ("sequence_expression", Typescript::SequenceExpression),
        ("case", Typescript::Case),
        ("required_parameter", Typescript::RequiredParameter),
        ("of", Typescript::Of),
        ("type_parameter", Typescript::TypeParameter),
        ("get", Typescript::Get),
        (
            "labeled_tuple_type_member",
            Typescript::LabeledTupleTypeMember,
        ),
        ("typeof", Typescript::Typeof),
        ("<=", Typescript::LTEQ),
        ("~", Typescript::TILDE),
        ("return_statement", Typescript::ReturnStatement),
        ("variable_declaration", Typescript::VariableDeclaration),
        ("tuple_type", Typescript::TupleType),
        ("export_clause", Typescript::ExportClause),
        ("===", Typescript::EQEQEQ),
        ("type_annotation", Typescript::TypeAnnotation),
        ("continue_statement", Typescript::ContinueStatement),
        ("|=", Typescript::PIPEEQ),
        ("existential_type", Typescript::ExistentialType),
        ("while_statement", Typescript::WhileStatement),
        (">>>=", Typescript::GTGTGTEQ),
        ("class", Typescript::Class),
        ("finally", Typescript::Finally),
        ("mapped_type_clause", Typescript::MappedTypeClause),
        ("global", Typescript::Global),
        ("|}", Typescript::PIPERBRACE),
        ("/=", Typescript::SLASHEQ),
        ("await", Typescript::Await),
        ("ambient_declaration", Typescript::AmbientDeclaration),
        (
            "omitting_type_annotation",
            Typescript::OmittingTypeAnnotation,
        ),
        ("<<", Typescript::LTLT),
        ("array", Typescript::Array),
        ("symbol", Typescript::Symbol),
        ("this", Typescript::This),
        ("function", Typescript::Function),
        ("import_specifier", Typescript::ImportSpecifier),
        ("constraint", Typescript::Constraint),
        ("for_statement", Typescript::ForStatement),
        ("string_token2", Typescript::StringToken2),
        ("assignment_pattern", Typescript::AssignmentPattern),
        ("accessibility_modifier", Typescript::AccessibilityModifier),
        ("let", Typescript::Let),
        ("ternary_expression", Typescript::TernaryExpression),
        (";", Typescript::SEMI),
        ("construct_signature", Typescript::ConstructSignature),
        ("catch_clause", Typescript::CatchClause),
        ("from", Typescript::From),
        ("class_body_repeat1", Typescript::ClassBodyRepeat1),
        ("do_statement", Typescript::DoStatement),
        ("{", Typescript::LBRACE),
        ("\'", Typescript::SQUOTE),
        ("&=", Typescript::AMPEQ),
        ("labeled_statement", Typescript::LabeledStatement),
        ("null", Typescript::Null),
        ("class_heritage", Typescript::ClassHeritage),
        ("lexical_declaration", Typescript::LexicalDeclaration),
        ("class_body", Typescript::ClassBody),
        (")", Typescript::RPAREN),
        ("declare", Typescript::Declare),
        ("_tuple_type_member", Typescript::TupleTypeMember),
        ("new", Typescript::New),
        (
            "type_predicate_annotation",
            Typescript::TypePredicateAnnotation,
        ),
        ("enum_assignment", Typescript::EnumAssignment),
        ("identifier", Typescript::Identifier),
        (",", Typescript::COMMA),
        ("?:", Typescript::QMARKCOLON),
        ("target", Typescript::Target),
        ("optional_identifier", Typescript::OptionalIdentifier),
        ("true", Typescript::True),
        ("*", Typescript::STAR),
        ("instanceof", Typescript::Instanceof),
        ("import_require_clause", Typescript::ImportRequireClause),
        ("property_signature", Typescript::PropertySignature),
        ("intersection_type", Typescript::IntersectionType),
        ("!==", Typescript::BANGEQEQ),
        ("property_identifier", Typescript::PropertyIdentifier),
        ("`", Typescript::BQUOTE),
        ("optional_parameter", Typescript::OptionalParameter),
        (
            "parenthesized_expression",
            Typescript::ParenthesizedExpression,
        ),
        ("switch_default", Typescript::SwitchDefault),
        ("do", Typescript::Do),
        ("-=", Typescript::DASHEQ),
        ("template_string", Typescript::TemplateString),
        ("keyof", Typescript::Keyof),
        ("predefined_type", Typescript::PredefinedType),
        ("+", Typescript::PLUS),
        (
            "implements_clause_repeat1",
            Typescript::ImplementsClauseRepeat1,
        ),
        ("_call_signature", Typescript::CallSignature),
        ("_declaration", Typescript::Declaration),
        ("**=", Typescript::STARSTAREQ),
        ("type_assertion", Typescript::TypeAssertion),
        ("enum", Typescript::Enum),
        ("call_expression", Typescript::CallExpression),
        ("??=", Typescript::QMARKQMARKEQ),
        ("internal_module", Typescript::InternalModule),
        ("rest_parameter", Typescript::RestParameter),
        ("empty_statement", Typescript::EmptyStatement),
        ("named_imports", Typescript::NamedImports),
        ("switch_statement", Typescript::SwitchStatement),
        ("nested_type_identifier", Typescript::NestedTypeIdentifier),
        ("default_type", Typescript::DefaultType),
        ("end", Typescript::End),
        ("literal_type", Typescript::LiteralType),
        ("false", Typescript::False),
        ("parenthesized_type", Typescript::ParenthesizedType),
        ("update_expression", Typescript::UpdateExpression),
        ("abstract", Typescript::Abstract),
        ("break_statement", Typescript::BreakStatement),
        ("_initializer", Typescript::Initializer),
        ("namespace", Typescript::Namespace),
        ("_tuple_type_identifier", Typescript::TupleTypeIdentifier),
        ("-?:", Typescript::DASHQMARKCOLON),
        ("module", Typescript::Module),
        ("binary_expression", Typescript::BinaryExpression),
        ("_rest_identifier", Typescript::RestIdentifier),
        ("program_repeat1", Typescript::ProgramRepeat1),
        ("_parameter_name", Typescript::ParameterName),
        ("_tuple_type_body", Typescript::TupleTypeBody),
        ("&&", Typescript::AMPAMP),
        ("namespace_import", Typescript::NamespaceImport),
        ("type_predicate", Typescript::TypePredicate),
        ("program", Typescript::Program),
        ("type_parameters_repeat1", Typescript::TypeParametersRepeat1),
        ("extends_clause", Typescript::ExtendsClause),
        ("try", Typescript::Try),
        ("subscript_expression", Typescript::SubscriptExpression),
        ("member_expression", Typescript::MemberExpression),
        ("object_type_repeat1", Typescript::ObjectTypeRepeat1),
        ("expression_statement", Typescript::ExpressionStatement),
        ("opting_type_annotation", Typescript::OptingTypeAnnotation),
        ("while", Typescript::While),
        ("generator_function", Typescript::GeneratorFunction),
        ("decorator", Typescript::Decorator),
        ("_tuple_type_body_repeat1", Typescript::TupleTypeBodyRepeat1),
        ("super", Typescript::Super),
        ("array_repeat1", Typescript::ArrayRepeat1),
        ("with", Typescript::With),
        ("||", Typescript::PIPEPIPE),
        (">>", Typescript::GTGT),
        ("]", Typescript::RBRACK),
        (
            "shorthand_property_identifier",
            Typescript::ShorthandPropertyIdentifier,
        ),
        ("*=", Typescript::STAREQ),
        ("hash_bang_line", Typescript::HashBangLine),
        ("array_pattern", Typescript::ArrayPattern),
        ("${", Typescript::DOLLARLBRACE),
        ("class_declaration", Typescript::ClassDeclaration),
        ("/", Typescript::SLASH),
        (
            "abstract_method_signature",
            Typescript::AbstractMethodSignature,
        ),
        ("import_statement", Typescript::ImportStatement),
        ("import_alias", Typescript::ImportAlias),
        ("regex", Typescript::Regex),
        ("any", Typescript::Any),
        ("variable_declarator", Typescript::VariableDeclarator),
        ("type_arguments", Typescript::TypeArguments),
        ("statement_identifier", Typescript::StatementIdentifier),
        (".", Typescript::DOT),
        ("is", Typescript::Is),
        ("_automatic_semicolon", Typescript::AutomaticSemicolon),
        ("new_expression", Typescript::NewExpression),
        ("@", Typescript::AT),
        ("%=", Typescript::PERCENTEQ),
        ("object_pattern", Typescript::ObjectPattern),
        ("escape_sequence", Typescript::EscapeSequence),
        ("!=", Typescript::BANGEQ),
        ("_from_clause", Typescript::FromClause),
        ("implements", Typescript::Implements),
        ("yield_expression", Typescript::YieldExpression),
        ("++", Typescript::PLUSPLUS),
        ("flow_maybe_type", Typescript::FlowMaybeType),
        ("named_imports_repeat1", Typescript::NamedImportsRepeat1),
        ("await_expression", Typescript::AwaitExpression),
        ("string", Typescript::String),
        ("computed_property_name", Typescript::ComputedPropertyName),
        ("finally_clause", Typescript::FinallyClause),
        ("arrow_function", Typescript::ArrowFunction),
        ("comment", Typescript::Comment),
        ("try_statement", Typescript::TryStatement),
        ("object_type", Typescript::ObjectType),
        ("import", Typescript::Import),
        ("object", Typescript::Object),
        ("template_string_repeat1", Typescript::TemplateStringRepeat1),
        ("|", Typescript::PIPE),
        ("||=", Typescript::PIPEPIPEEQ),
        ("conditional_type", Typescript::ConditionalType),
        ("enum_declaration", Typescript::EnumDeclaration),
        ("+=", Typescript::PLUSEQ),
        (
            "abstract_class_declaration",
            Typescript::AbstractClassDeclaration,
        ),
        ("^=", Typescript::CARETEQ),
        ("_expression", Typescript::Expression),
        ("^", Typescript::CARET),
        ("delete", Typescript::Delete),
        ("**", Typescript::STARSTAR),
        ("asserts", Typescript::Asserts),
        ("extends_clause_repeat1", Typescript::ExtendsClauseRepeat1),
        ("string_token1", Typescript::StringToken1),
        ("{|", Typescript::LBRACEPIPE),
        ("switch", Typescript::Switch),
        ("unary_expression", Typescript::UnaryExpression),
        ("template_substitution", Typescript::TemplateSubstitution),
        ("type_alias_declaration", Typescript::TypeAliasDeclaration),
        ("-", Typescript::DASH),
        ("throw", Typescript::Throw),
        ("interface", Typescript::Interface),
        ("method_definition", Typescript::MethodDefinition),
        ("arguments", Typescript::Arguments),
        (
            "_augmented_assignment_lhs",
            Typescript::AugmentedAssignmentLhs,
        ),
        ("=", Typescript::EQ),
        ("debugger_statement", Typescript::DebuggerStatement),
        ("_property_name", Typescript::PropertyName),
        ("debugger", Typescript::Debugger),
        ("implements_clause", Typescript::ImplementsClause),
        ("readonly", Typescript::Readonly),
        ("lookup_type", Typescript::LookupType),
        ("meta_property", Typescript::MetaProperty),
        ("function_signature", Typescript::FunctionSignature),
        ("switch_body_repeat1", Typescript::SwitchBodyRepeat1),
        ("set", Typescript::Set),
        (":", Typescript::COLON),
        ("require", Typescript::Require),
        ("string_repeat1", Typescript::StringRepeat1),
        ("ERROR", Typescript::Error),
        (
            "variable_declaration_repeat1",
            Typescript::VariableDeclarationRepeat1,
        ),
        ("?", Typescript::QMARK),
        ("?.", Typescript::QMARKDOT),
        ("_primary_type", Typescript::PrimaryType),
        (
            "generator_function_declaration",
            Typescript::GeneratorFunctionDeclaration,
        ),
        ("--", Typescript::DASHDASH),
        ("regex_pattern", Typescript::RegexPattern),
        ("else", Typescript::Else),
        ("_type", Typescript::Type),
        ("with_statement", Typescript::WithStatement),
        ("if", Typescript::If),
        ("export_clause_repeat1", Typescript::ExportClauseRepeat1),
        ("}", Typescript::RBRACE),
        ("switch_body", Typescript::SwitchBody),
        ("&&=", Typescript::AMPAMPEQ),
        ("index_type_query", Typescript::IndexTypeQuery),
        ("private", Typescript::Private),
        ("export", Typescript::Export),
        ("<<=", Typescript::LTLTEQ),
        (">>=", Typescript::GTGTEQ),
        ("_template_chars", Typescript::TemplateChars),
        (
            "augmented_assignment_expression",
            Typescript::AugmentedAssignmentExpression,
        ),
        ("union_type", Typescript::UnionType),
        ("continue", Typescript::Continue),
        ("pair", Typescript::Pair),
        ("==", Typescript::EQEQ),
        ("%", Typescript::PERCENT),
        ("function_type", Typescript::FunctionType),
        ("export_specifier", Typescript::ExportSpecifier),
        ("break", Typescript::Break),
        (">=", Typescript::GTEQ),
        ("...", Typescript::DOTDOTDOT),
        ("(", Typescript::LPAREN),
        ("formal_parameters", Typescript::FormalParameters),
        ("interface_declaration", Typescript::InterfaceDeclaration),
        ("spread_element", Typescript::SpreadElement),
        (">>>", Typescript::GTGTGT),
        ("in", Typescript::In),
        ("type_identifier", Typescript::TypeIdentifier),
        ("throw_statement", Typescript::ThrowStatement),
        ("const", Typescript::Const),
        ("\\\"", Typescript::DQUOTE),
        ("array_type", Typescript::ArrayType),
        ("=>", Typescript::EQGT),
        ("enum_body", Typescript::EnumBody),
        ("non_null_expression", Typescript::NonNullExpression),
        ("static", Typescript::Static),
        ("protected", Typescript::Protected),
        ("_for_header", Typescript::ForHeader),
        ("undefined", Typescript::Undefined),
        ("type_query", Typescript::TypeQuery),
        ("for", Typescript::For),
        ("nested_identifier", Typescript::NestedIdentifier),
        ("constructor_type", Typescript::ConstructorType),
        ("object_repeat1", Typescript::ObjectRepeat1),
        ("as", Typescript::As),
        ("void", Typescript::Void),
        ("number", Typescript::Number),
        ("string_repeat2", Typescript::StringRepeat2),
        ("assignment_expression", Typescript::AssignmentExpression),
        ("var", Typescript::Var),
        ("regex_flags", Typescript::RegexFlags),
        ("public", Typescript::Public),
        ("extends", Typescript::Extends),
        ("??", Typescript::QMARKQMARK),
        ("default", Typescript::Default),
        (
            "formal_parameters_repeat1",
            Typescript::FormalParametersRepeat1,
        ),
        ("return", Typescript::Return),
        ("as_expression", Typescript::AsExpression),
        ("method_signature", Typescript::MethodSignature),
        ("index_signature", Typescript::IndexSignature),
        ("export_statement", Typescript::ExportStatement),
        ("[", Typescript::LBRACK),
        ("statement_block", Typescript::StatementBlock),
        ("boolean", Typescript::Boolean),
        (
            "export_statement_repeat1",
            Typescript::ExportStatementRepeat1,
        ),
        ("yield", Typescript::Yield),
        ("catch", Typescript::Catch),
        ("for_in_statement", Typescript::ForInStatement),
        ("else_clause", Typescript::ElseClause),
        ("public_field_definition", Typescript::PublicFieldDefinition),
        ("function_declaration", Typescript::FunctionDeclaration),
        ("type_parameters", Typescript::TypeParameters),
        ("generic_type", Typescript::GenericType),
        ("enum_body_repeat1", Typescript::EnumBodyRepeat1),
    ]),
};

impl From<&str> for Typescript {
    #[inline(always)]
    fn from(key: &str) -> Self {
        KEYS.get(key).unwrap().clone()
    }
}

impl From<u16> for Typescript {
    #[inline(always)]
    fn from(x: u16) -> Self {
        num::FromPrimitive::from_u16(x).unwrap_or(Self::Error)
    }
}

// Typescript == u16
impl PartialEq<u16> for Typescript {
    #[inline(always)]
    fn eq(&self, x: &u16) -> bool {
        *self == Typescript::from(*x)
    }
}

// u16 == Typescript
impl PartialEq<Typescript> for u16 {
    #[inline(always)]
    fn eq(&self, x: &Typescript) -> bool {
        *x == *self
    }
}
